type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }


    }

    class Seat {
        private int row;
        private int column;
        private int price;

        private boolean bought;

        public Seat() {
        }

        ;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public Seat(int row, int column, int price, boolean bought) {
            this.row = row;
            this.column = column;
            this.price = price;
            this.bought = bought;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @JsonIgnore
        public boolean isBought() {
            return bought;
        }

        @JsonIgnore
        public void setBought(boolean bought) {
            this.bought = bought;
        }
    }

    class MovieTheatre {
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;

        public MovieTheatre() {
        }

        public MovieTheatre(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = assembleSeats();
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }


        public List<Seat> assembleSeats() {
            List<Seat> totalSeats = new ArrayList<>();
            int price = 10;
            for (int i = 1; i <= total_rows; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    if (i > 4) {
                        price = 8;
                    }
                    totalSeats.add(new Seat(i, j, price));
                }
            }
            return totalSeats;
        }


    }

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    class SeatOutOfBoundsException extends RuntimeException {

        public SeatOutOfBoundsException(String cause) {
            super(cause);
        }
    }

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    class TicketAlreadyPurchased extends RuntimeException {

        public TicketAlreadyPurchased(String cause) {
            super(cause);
        }
    }


    @RestController
    class TheatreController {
        MovieTheatre movieTheatre = new MovieTheatre(9, 9);

        @GetMapping("/seats")
        public MovieTheatre getAvailableSeats() {
            return movieTheatre;
        }


        @PostMapping("/purchase")
        public Seat ticketPurchase(@RequestBody Seat s) {
            int row = s.getRow();
            int column = s.getColumn();
            if (row > movieTheatre.getTotal_rows() || column > movieTheatre.getTotal_columns()
                    || row <= 0 || column <= 0) {
                throw new SeatOutOfBoundsException("The number of a row or a column is out of bounds!");
            }
            for (Seat seat : movieTheatre.getAvailable_seats()) {
                if (seat.getRow() == row && seat.getColumn() == column) {
                    movieTheatre.getAvailable_seats().remove(seat);
                    return seat;
                }
            }
            //return null;
            throw new TicketAlreadyPurchased("The ticket has been already purchased!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    server.error.include-message=always
  learner_created: false
- name: src/cinema/MyMain.java
  visible: true
  text: |
    package cinema;

    public class MyMain {
        public static void main(String[] args){
            String num = "3003";
            if (num.charAt(0) == num.charAt(3) && num.charAt(1) == num.charAt(2)) {
                System.out.println(1);
            } else {
                System.out.println(12);
            }



        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/classes/MovieTheatre.java
  visible: true
  text: |
    package cinema.classes;


    import java.util.ArrayList;
    import java.util.List;

    public class MovieTheatre {
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;

        public MovieTheatre() {
        }

        public MovieTheatre(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = assembleSeats();
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }

        public List<Seat> assembleSeats() {
            List<Seat> totalSeats = new ArrayList<>();
            int price = 10;
            for (int i = 1; i <= total_rows; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    if (i > 4) {
                        price = 8;
                    }
                    totalSeats.add(new Seat(i, j, price));
                }
            }
            return totalSeats;
        }
    }
  learner_created: true
- name: src/cinema/classes/CustomErrorMessage.java
  visible: true
  text: |
    package cinema.classes;

    public class CustomErrorMessage {
        private String error;

        public CustomErrorMessage(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/classes/ServiceError.java
  visible: true
  text: |-
    package cinema.classes;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import java.util.Map;

    @ControllerAdvice
    public class ServiceError {
        @ExceptionHandler(SeatException.class)
        public ResponseEntity<Map<String, String>> handleAllExceptions(SeatException e) {
            return new ResponseEntity<>(Map.of("error", e.getMessage()), HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/controller/TheatreController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.classes.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

        @RestController
        public  class TheatreController {
            MovieTheatre movieTheatre = new MovieTheatre(9, 9);
            List<Purchase> purchases = new ArrayList<>();

            @GetMapping("/seats")
            public MovieTheatre getAvailableSeats() {
                return movieTheatre;
            }


            @PostMapping("/purchase")
            public Purchase ticketPurchase(@RequestBody Seat s) {
                int row = s.getRow();
                int column = s.getColumn();
                if (row > movieTheatre.getTotal_rows() || column > movieTheatre.getTotal_columns()
                        || row <= 0 || column <= 0) {
                    throw new SeatException("The number of a row or a column is out of bounds!");
                }

                for (Seat seat : movieTheatre.getAvailable_seats()) {
                    if (seat.getRow() == row && seat.getColumn() == column && !seat.isBought()) {
                        seat.setBought(true);
                        Purchase purchase = new Purchase();
                        UUID token = UUID.randomUUID();
                        purchase.setToken(token);
                        purchase.setTicket(seat);
                        purchases.add(purchase);
                        return purchase;
                    }
                }
                throw new SeatException("The ticket has been already purchased!");
            }


            @PostMapping("/return")
            public ReturnedTicket returnedTicket(@RequestBody Purchase purchase){
                for(Purchase p : purchases){
                    if(p.getToken().equals(purchase.getToken())){
                        ReturnedTicket returned_ticket = new ReturnedTicket(p.getTicket());
                        p.getTicket().setBought(false);
                        return returned_ticket;
                    }
                }
                throw new SeatException("Wrong token!");
            }

            @ExceptionHandler(SeatException.class)
            public ResponseEntity<CustomErrorMessage> handleSeatError(SeatException e) {
                CustomErrorMessage body = new CustomErrorMessage(e.getMessage());
                return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
            }

        }
  learner_created: true
- name: src/cinema/classes/Purchase.java
  visible: true
  text: |
    package cinema.classes;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.List;
    import java.util.UUID;

    public class Purchase {
        private UUID token;
        private Seat ticket;

        public Purchase() {
        }

        public Purchase(UUID token, Seat ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }

    }
  learner_created: true
- name: src/cinema/classes/ReturnedTicket.java
  visible: true
  text: |
    package cinema.classes;


    public class ReturnedTicket {

        private Seat returned_ticket;

        public ReturnedTicket() {
        }

        public ReturnedTicket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/classes/Seat.java
  visible: true
  text: |
    package cinema.classes;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat {

        private int row;
        private int column;
        private int price;
        private boolean bought;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public Seat(int row, int column, int price, boolean bought) {
            this.row = row;
            this.column = column;
            this.price = price;
            this.bought = bought;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
        @JsonIgnore
        public boolean isBought() {
            return bought;
        }

        @JsonIgnore
        public void setBought(boolean bought) {
            this.bought = bought;
        }

    }
  learner_created: true
- name: src/cinema/classes/SeatException.java
  visible: true
  text: |
    package cinema.classes;

    public class SeatException extends RuntimeException {
        public SeatException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/classes/Stats.java
  visible: true
  learner_created: true
- name: src/cinema/classes/AccessUnauthorized.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 08 Aug 2022 17:56:43 UTC
record: -1
